require('babel-register')

//problem 1
//if we list all the natural numbers below 10 that are multiples of 3 or 5 we get 3,5,6 and 9. The sumer of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000
const findMultiples = (x,y,z) => {
  let array = []
  for(var i =0; i<z; i++)
    array.push(i)
  return array.filter(item => item%x===0 || item%y === 0).reduce((a, b) => a+b)
}

//problem 2
// Even fibonacci numbers
// each new term in the fibanoci sequence is generated by adding the previous 2 terms. By starting with 1 and 2, the first 10 terms will be
// 1,2,3,5,8,13,21,34,55,89
// By considering the terms in the fibonacci sequence whose values do not exceed 4 million, find the sum of the even valued terms

const fib = (x) => {
  if(x === 0 || x === 1)
    return 1
  return fib(x - 1) + fib(x-2)
}

const runProblem2 = () => {
  let array = []
  for(var i=0; i<Infinity; i++) {
    let val = fib(i)
    if(val < 4000000) {
      array.push(val)
    }
    else {
      break
    }

  }
  return array.filter(a => a%2 === 0).reduce((a, b) => a+b)
}

//problem 3
//what are the largest prime factors of the number 600851475143

const isEven = (number) => {
  let n = Number(number);
  return n === 0 || !!(n && !(n%2))
}
const isPrime = (number) => {
  let prime = false
  for(var i=0; i<number; i++) {
    let result = number/i
    console.log(isEven(number/i))
    if(isEven(result)) {
      prime = true
    }
    else {
      prime = false
    }
  }
  return prime
}

console.log(isPrime(3))

